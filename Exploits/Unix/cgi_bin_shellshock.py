__code_desc__ = """ CVE-2014-6271 cgi-bin reverse shell """
__code_version__ = 'v0.0.0'
__code_debug__ = True

## Standard Libraries
import logging
import sys
import argparse

# Third Party libraries
# Modules

def begin_logging():
    handler = logging.StreamHandler()
    handler.setFormatter(
        logging.Formatter(
            style="{",
            fmt="[{name}:{filename}] {levelname} - {message}"
        )
    )
    log = logging.getLogger(__name__)
    if __code_debug__:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)
    log.addHandler(handler)
    return log

def collect_args():
    parser = argparse.ArgumentParser(description=__code_desc__,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-V', '--version', action='version', version=__code_version__)
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('rhost', default='localhost',
        help="set the remote host to test (default: %(default)s)")
    parser.add_argument('url_stub', default='/cgi-bin/test.cgi',
        help="set the url stub to test (default: %(default)s)")
    parser.add_argument('callback', default='127.0.0.1/4444',
        help="set the attacker callback in the form of ip.address/tcp_port (default: %(default)s)")
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help'])
    return parser, args

def handle_args():
    # collect parser if needed to conditionally call usage: parser.print_help()
    parser, args = collect_args()
    return parser, args

def main():
    log = begin_logging()
    parser, args = handle_args()
    if args.verbose:
        print_verbose(f"argparse.rhost = {args.rhost}")
        print_verbose(f"argparse.url_stub = {args.url_stub}")
        print_verbose(f"argparse.callback = {args.callback}")


if __name__=="__main__":
    main()
